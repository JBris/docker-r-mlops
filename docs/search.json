[
  {
    "objectID": "2_linear_regression_tidymodels/doc.html",
    "href": "2_linear_regression_tidymodels/doc.html",
    "title": "Tidymodels Linear Regression",
    "section": "",
    "text": "We will demonstrate how to fit a linear regression model with the iris dataset.\nFirst we will load the data.\n\nlibrary(knitr)\nlibrary(tidyverse)\n\ndata(iris)\n\niris = iris |>\n  rename_with(~ tolower(gsub(\".\", \"_\", .x, fixed = TRUE)))\n\nNext, we will visualise the data."
  },
  {
    "objectID": "2_linear_regression_tidymodels/doc.html#regression",
    "href": "2_linear_regression_tidymodels/doc.html#regression",
    "title": "Tidymodels Linear Regression",
    "section": "Regression",
    "text": "Regression\nNext we will fit a linear regression model.\n\n\n\nCall:\nlm(formula = petal_width ~ petal_length, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.56515 -0.12358 -0.01898  0.13288  0.64272 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -0.363076   0.039762  -9.131  4.7e-16 ***\npetal_length  0.415755   0.009582  43.387  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2065 on 148 degrees of freedom\nMultiple R-squared:  0.9271,    Adjusted R-squared:  0.9266 \nF-statistic:  1882 on 1 and 148 DF,  p-value: < 2.2e-16\n\n\nNext, we will view some diagnostics."
  },
  {
    "objectID": "2_linear_regression_tidymodels/doc.html#session-information",
    "href": "2_linear_regression_tidymodels/doc.html#session-information",
    "title": "Tidymodels Linear Regression",
    "section": "Session Information",
    "text": "Session Information\n\n\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] forcats_0.5.2   stringr_1.4.1   dplyr_1.0.10    purrr_0.3.5    \n [5] readr_2.1.3     tidyr_1.2.1     tibble_3.1.8    ggplot2_3.3.6  \n [9] tidyverse_1.3.2 knitr_1.40     \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0    xfun_0.34           haven_2.5.1        \n [4] gargle_1.2.1        colorspace_2.0-3    vctrs_0.5.0        \n [7] generics_0.1.3      htmltools_0.5.3     yaml_2.3.6         \n[10] utf8_1.2.2          rlang_1.0.6         pillar_1.8.1       \n[13] withr_2.5.0         glue_1.6.2          DBI_1.1.3          \n[16] dbplyr_2.2.1        modelr_0.1.9        readxl_1.4.1       \n[19] lifecycle_1.0.3     munsell_0.5.0       gtable_0.3.1       \n[22] cellranger_1.1.0    rvest_1.0.3         htmlwidgets_1.5.4  \n[25] evaluate_0.17       tzdb_0.3.0          fastmap_1.1.0      \n[28] fansi_1.0.3         broom_1.0.1         backports_1.4.1    \n[31] scales_1.2.1        googlesheets4_1.0.1 jsonlite_1.8.3     \n[34] fs_1.5.2            hms_1.1.2           digest_0.6.30      \n[37] stringi_1.7.8       grid_4.2.1          cli_3.4.1          \n[40] tools_4.2.1         magrittr_2.0.3      crayon_1.5.2       \n[43] pkgconfig_2.0.3     ellipsis_0.3.2      xml2_1.3.3         \n[46] reprex_2.0.2        googledrive_2.0.0   lubridate_1.8.0    \n[49] assertthat_0.2.1    rmarkdown_2.17      httr_1.4.4         \n[52] rstudioapi_0.14     R6_2.5.1            compiler_4.2.1"
  },
  {
    "objectID": "1_linear_regression/doc.html",
    "href": "1_linear_regression/doc.html",
    "title": "Linear Regression",
    "section": "",
    "text": "We will demonstrate how to fit a linear regression model to the iris dataset.\nFirst we will load the data.\n\nlibrary(knitr)\nlibrary(tidyverse)\n\ndata(iris)\n\niris = iris |>\n  rename_with(~ tolower(gsub(\".\", \"_\", .x, fixed = TRUE)))\n\niris |>\n  head()\n\n  sepal_length sepal_width petal_length petal_width species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nNext, we will visualise the data."
  },
  {
    "objectID": "1_linear_regression/doc.html#regression",
    "href": "1_linear_regression/doc.html#regression",
    "title": "Linear Regression",
    "section": "Regression",
    "text": "Regression\nNext we will fit a linear regression model.\n\n\n\nCall:\nlm(formula = petal_width ~ petal_length, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.56515 -0.12358 -0.01898  0.13288  0.64272 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -0.363076   0.039762  -9.131  4.7e-16 ***\npetal_length  0.415755   0.009582  43.387  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2065 on 148 degrees of freedom\nMultiple R-squared:  0.9271,    Adjusted R-squared:  0.9266 \nF-statistic:  1882 on 1 and 148 DF,  p-value: < 2.2e-16\n\n\n\nDiagnostics\nNext, we will view some diagnostics."
  },
  {
    "objectID": "1_linear_regression/doc.html#session-information",
    "href": "1_linear_regression/doc.html#session-information",
    "title": "Linear Regression",
    "section": "Session Information",
    "text": "Session Information\n\n\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] forcats_0.5.2   stringr_1.4.1   dplyr_1.0.10    purrr_0.3.5    \n [5] readr_2.1.3     tidyr_1.2.1     tibble_3.1.8    ggplot2_3.3.6  \n [9] tidyverse_1.3.2 knitr_1.40     \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0    xfun_0.34           haven_2.5.1        \n [4] gargle_1.2.1        colorspace_2.0-3    vctrs_0.5.0        \n [7] generics_0.1.3      htmltools_0.5.3     yaml_2.3.6         \n[10] utf8_1.2.2          rlang_1.0.6         pillar_1.8.1       \n[13] withr_2.5.0         glue_1.6.2          DBI_1.1.3          \n[16] dbplyr_2.2.1        modelr_0.1.9        readxl_1.4.1       \n[19] lifecycle_1.0.3     munsell_0.5.0       gtable_0.3.1       \n[22] cellranger_1.1.0    rvest_1.0.3         htmlwidgets_1.5.4  \n[25] evaluate_0.17       tzdb_0.3.0          fastmap_1.1.0      \n[28] fansi_1.0.3         broom_1.0.1         backports_1.4.1    \n[31] scales_1.2.1        googlesheets4_1.0.1 jsonlite_1.8.3     \n[34] fs_1.5.2            hms_1.1.2           digest_0.6.30      \n[37] stringi_1.7.8       grid_4.2.1          cli_3.4.1          \n[40] tools_4.2.1         magrittr_2.0.3      crayon_1.5.2       \n[43] pkgconfig_2.0.3     ellipsis_0.3.2      xml2_1.3.3         \n[46] reprex_2.0.2        googledrive_2.0.0   lubridate_1.8.0    \n[49] assertthat_0.2.1    rmarkdown_2.17      httr_1.4.4         \n[52] rstudioapi_0.14     R6_2.5.1            compiler_4.2.1"
  },
  {
    "objectID": "2_linear_regression_mlflow/doc.html",
    "href": "2_linear_regression_mlflow/doc.html",
    "title": "MLFlow Linear Regression",
    "section": "",
    "text": "We will demonstrate how to fit a linear regression model package to the Star Wars dataset.\nSubsequently, we will track the experiment and save the model to an MLFlow server. We use the carrier package to serialize the model (write an in-memory object to file).\n\n# Constants\n\nMLFLOW_URL = \"http://mlflow:5000\"\n\n# Imports\n\nlibrary(carrier)\nlibrary(DataExplorer)\nlibrary(knitr)\nlibrary(reticulate)\nuse_condaenv(\"r-mlflow-1.30.0\")\nlibrary(mlflow)\nmlflow::mlflow_set_tracking_uri(MLFLOW_URL)\nlibrary(tidyverse)\n\n# Load data\n\ndata = dplyr::starwars |>\n   mutate_if(is.numeric, ~ replace_na(.,0))\n\ndata |>\n  head()\n\n# A tibble: 6 × 14\n  name         height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n  <chr>         <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n1 Luke Skywal…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n2 C-3PO           167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n3 R2-D2            96    32 <NA>    white,… red        33   none  mascu… Naboo  \n4 Darth Vader     202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n5 Leia Organa     150    49 brown   light   brown      19   fema… femin… Aldera…\n6 Owen Lars       178   120 brown,… light   blue       52   male  mascu… Tatooi…\n# … with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¹​hair_color, ²​skin_color,\n#   ³​eye_color, ⁴​birth_year, ⁵​homeworld"
  },
  {
    "objectID": "2_linear_regression_mlflow/doc.html#regression",
    "href": "2_linear_regression_mlflow/doc.html#regression",
    "title": "MLFlow Linear Regression",
    "section": "Regression",
    "text": "Regression\nNext we will fit a linear regression model.\n\n\n\nCall:\nlm(formula = petal_width ~ petal_length, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.56515 -0.12358 -0.01898  0.13288  0.64272 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -0.363076   0.039762  -9.131  4.7e-16 ***\npetal_length  0.415755   0.009582  43.387  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2065 on 148 degrees of freedom\nMultiple R-squared:  0.9271,    Adjusted R-squared:  0.9266 \nF-statistic:  1882 on 1 and 148 DF,  p-value: < 2.2e-16\n\n\nNext, we will view some diagnostics."
  },
  {
    "objectID": "2_linear_regression_mlflow/doc.html#session-information",
    "href": "2_linear_regression_mlflow/doc.html#session-information",
    "title": "MLFlow Linear Regression",
    "section": "Session Information",
    "text": "Session Information\n\n\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] forcats_0.5.2      stringr_1.4.1      dplyr_1.0.10       purrr_0.3.5       \n [5] readr_2.1.3        tidyr_1.2.1        tibble_3.1.8       ggplot2_3.3.6     \n [9] tidyverse_1.3.2    mlflow_1.30.0      reticulate_1.26    knitr_1.40        \n[13] DataExplorer_0.8.2 carrier_0.1.0     \n\nloaded via a namespace (and not attached):\n [1] httr_1.4.4          jsonlite_1.8.3      modelr_0.1.9       \n [4] assertthat_0.2.1    askpass_1.1         googlesheets4_1.0.1\n [7] cellranger_1.1.0    yaml_2.3.6          pillar_1.8.1       \n[10] backports_1.4.1     lattice_0.20-45     glue_1.6.2         \n[13] digest_0.6.30       promises_1.2.0.1    rvest_1.0.3        \n[16] colorspace_2.0-3    htmltools_0.5.3     httpuv_1.6.6       \n[19] Matrix_1.4-1        pkgconfig_2.0.3     broom_1.0.1        \n[22] haven_2.5.1         scales_1.2.1        processx_3.8.0     \n[25] later_1.3.0         tzdb_0.3.0          openssl_2.0.4      \n[28] googledrive_2.0.0   generics_0.1.3      ellipsis_0.3.2     \n[31] swagger_3.33.1      withr_2.5.0         cli_3.4.1          \n[34] crayon_1.5.2        readxl_1.4.1        magrittr_2.0.3     \n[37] evaluate_0.17       ps_1.7.2            fs_1.5.2           \n[40] fansi_1.0.3         xml2_1.3.3          tools_4.2.1        \n[43] data.table_1.14.4   hms_1.1.2           gargle_1.2.1       \n[46] lifecycle_1.0.3     reprex_2.0.2        munsell_0.5.0      \n[49] networkD3_0.4       compiler_4.2.1      forge_0.2.0        \n[52] rlang_1.0.6         grid_4.2.1          rstudioapi_0.14    \n[55] rappdirs_0.3.3      htmlwidgets_1.5.4   igraph_1.3.5       \n[58] base64enc_0.1-3     rmarkdown_2.17      gtable_0.3.1       \n[61] DBI_1.1.3           R6_2.5.1            ini_0.3.1          \n[64] gridExtra_2.3       lubridate_1.8.0     fastmap_1.1.0      \n[67] utf8_1.2.2          zeallot_0.1.0       stringi_1.7.8      \n[70] parallel_4.2.1      Rcpp_1.0.9          vctrs_0.5.0        \n[73] png_0.1-7           dbplyr_2.2.1        tidyselect_1.2.0   \n[76] xfun_0.34"
  },
  {
    "objectID": "2_linear_regression_mlflow/doc.html#mlflow",
    "href": "2_linear_regression_mlflow/doc.html#mlflow",
    "title": "MLFlow Linear Regression",
    "section": "MLFlow",
    "text": "MLFlow\n\nRegistering Models\nWe will first create a new model in the model registry.\n\nclient = mlflow_client()\ntryCatch(\n  expr = {mlflow_delete_registered_model(\"sw_lm\", client = client)},\n  error = function(x) {}\n)\nmlflow_create_registered_model(\"sw_lm\", client = client, description = \"Perform predictions using Star Wars characters.\")\n\n$name\n[1] \"sw_lm\"\n\n$creation_timestamp\n[1] 1.668224e+12\n\n$last_updated_timestamp\n[1] 1.668224e+12\n\n$description\n[1] \"Perform predictions using Star Wars characters.\"\n\n\nWe will next execute an MLFlow run.\n\n\nMLFlow Run\n\ns3_bucket = \"s3://mlflow/sw_lm\"\n# Begin the run.\nexperiment = mlflow_set_experiment(experiment_name = \"sw_lm\", artifact_location = s3_bucket) \nrun = mlflow_start_run(client = client)\n\n# Save the model.\nsw_lm = lm(height ~ mass, data = data)\npackaged_sw_lm = carrier::crate(\n    function(x) stats::predict.lm(sw_lm),\n    sw_lm = sw_lm\n)\n\n# Log params and metrics.\nmlflow_log_param(\"Intercept\", sw_lm$coefficients[\"(Intercept)\"], client = client, run_id = run$run_uuid)\nmlflow_log_param(\"mass\", sw_lm$coefficients[\"mass\"], client = client, run_id = run$run_uuid)\nmlflow_log_metric(\"MSE\", mean(sw_lm$residuals^2), client = client, run_id = run$run_uuid)\n\n# Log predictions and actual values\nsw_lm |>\n  predict() |>\n  iwalk(\n    ~ mlflow_log_metric(\"prediction\", .x, step = as.numeric(.y), client = client, run_id = run$run_uuid)\n    )\n\ndata$height |> \n  iwalk(\n    ~ mlflow_log_metric(\"actual\",  .x, step = .y, client = client, run_id = run$run_uuid)\n    )\n\n# Save model to the registry.\ncrated_model = \"/tmp/sw_lm\"\nsaved_model = mlflow_save_model(packaged_sw_lm, crated_model)  \nlogged_model = mlflow_log_artifact(crated_model, client = client, run_id =  run$run_uuid) \n\n2022/11/14 10:22:39 INFO mlflow.store.artifact.cli: Logged artifact from local dir /tmp/sw_lm to artifact_path=None\n\nversioned_model = mlflow_create_model_version(\"sw_lm\", run$artifact_uri, run_id = run$run_uuid, client = client)\n\n# Generate report.\nsw_report = data |>\n  select_if(~ !is.list(.x)) |>\n  create_report(output_file = \"star_wars.html\", output_dir = \"/tmp\", report_title = \"Star Wars Report\", quiet = T)\nlogged_report = mlflow_log_artifact(\"/tmp/star_wars.html\", client = client, run_id =  run$run_uuid) \n\n2022/11/14 10:22:50 INFO mlflow.store.artifact.cli: Logged artifact from local file /tmp/star_wars.html to artifact_path=None\n\n# Save plots.\nsw_plot = \"/tmp/star_wars_characters.png\"\npng(filename = sw_plot)\nplot(data$height, data$mass)\ndoff = dev.off()\nlogged_plot = mlflow_log_artifact(sw_plot, client = client, run_id =  run$run_uuid) \n\n2022/11/14 10:22:51 INFO mlflow.store.artifact.cli: Logged artifact from local file /tmp/star_wars_characters.png to artifact_path=None\n\n# Save tibble.\ndata_csv = \"/tmp/star_wars_characters.csv\"\nwrite_csv(data, data_csv)\nlogged_csv = mlflow_log_artifact(data_csv, client = client, run_id =  run$run_uuid) \n\n2022/11/14 10:22:52 INFO mlflow.store.artifact.cli: Logged artifact from local file /tmp/star_wars_characters.csv to artifact_path=None\n\n# End run.\nrun_end = mlflow_end_run(run_id =  run$run_uuid, client = client)\n\n\n\nLoading and Serving Models\nNext, we will load the model from the registry.\n\n# Remove the model from the R environment.\nprint(packaged_sw_lm)\n\n<crate> 39.87 kB\n* function: 26.64 kB\n* `sw_lm`: 13.19 kB\nfunction(x) stats::predict.lm(sw_lm)\n\nrm(packaged_sw_lm)\n\n# Load the model from the registry.\npackaged_sw_lm = mlflow_load_model(\"models:/sw_lm/1\")\nprint(packaged_sw_lm)\n\n<crate> 43.86 kB\n* function: 26.64 kB\n* `sw_lm`: 17.18 kB\nfunction(x) stats::predict.lm(sw_lm)\n\n\nFinally, we will demonstrate how to deploy the model using a model-as-a-service approach.\n\n\nexport MLFLOW_TRACKING_URI=http://mlflow:5000\n\n# ping http://0.0.0.0:9000/predict \nmlflow models serve -m \"models:/sw_lm/1\" -h 0.0.0.0 -p 9000 \n\nYou can also run the following command to deploy the model in a Docker container: docker compose -f docker-compose-serve-model.yaml up"
  },
  {
    "objectID": "2_linear_regression_mlflow/doc.html#minio",
    "href": "2_linear_regression_mlflow/doc.html#minio",
    "title": "MLFlow Linear Regression",
    "section": "Minio",
    "text": "Minio\nMinio is an object datavase th\nWe need to create a minio bucket. All of our files will be saved into this bucket.\n\n\nfrom minio import Minio\nimport json\nimport os\n\nminioClient = Minio(\n  os.environ['MLFLOW_S3_ENDPOINT_URL'].split('//')[1],\n  access_key=os.environ['AWS_ACCESS_KEY_ID'],\n  secret_key=os.environ['AWS_SECRET_ACCESS_KEY'],\n  secure = False\n)\n\nmlflow_names = [ bucket.name for bucket in minioClient.list_buckets() ]\nif 'mlflow' not in mlflow_names:\n  minioClient.make_bucket('mlflow')\n\nNext, we set the bucket policy.\n\n\npolicy = {\n  \"Version\":\"2012-10-17\",\n  \"Statement\":[\n    {\n      \"Sid\":\"\",\n      \"Effect\":\"Allow\",\n      \"Principal\":{\"AWS\":\"*\"},\n      \"Action\":\"s3:GetBucketLocation\",\n      \"Resource\":\"arn:aws:s3:::mlflow\"\n    },\n    {\n      \"Sid\":\"\",\n      \"Effect\":\"Allow\",\n      \"Principal\":{\"AWS\":\"*\"},\n      \"Action\":\"s3:ListBucket\",\n      \"Resource\":\"arn:aws:s3:::mlflow\"\n    },\n    {\n      \"Sid\":\"\",\n      \"Effect\":\"Allow\",\n      \"Principal\":{\"AWS\":\"*\"},\n      \"Action\":\"s3:GetObject\",\n      \"Resource\":\"arn:aws:s3:::mlflow/*\"\n    },\n    {\n      \"Sid\":\"\",\n      \"Effect\":\"Allow\",\n      \"Principal\":{\"AWS\":\"*\"},\n      \"Action\":\"s3:PutObject\",\n      \"Resource\":\"arn:aws:s3:::mlflow/*\"\n    }\n  ]}\n\nminioClient.set_bucket_policy('mlflow', json.dumps(policy))"
  },
  {
    "objectID": "3_tidy_linear_regression/doc.html",
    "href": "3_tidy_linear_regression/doc.html",
    "title": "MLFlow Linear Regression",
    "section": "",
    "text": "We will demonstrate how to fit a linear regression model package to the Star Wars dataset.\nSubsequently, we will track the experiment and save the model to an MLFlow server. We use the carrier package to serialize the model (write an in-memory object to file).\n\n# Constants\n\nMLFLOW_URL = \"http://mlflow:5000\"\n\n# Imports\n\nlibrary(carrier)\nlibrary(DataExplorer)\nlibrary(knitr)\nlibrary(reticulate)\nuse_condaenv(\"r-mlflow-1.30.0\")\nlibrary(mlflow)\nmlflow::mlflow_set_tracking_uri(MLFLOW_URL)\nlibrary(tidyverse)\n\n# Load data\n\ndata = dplyr::starwars |>\n   mutate_if(is.numeric, ~ replace_na(.,0))\n\ndata |>\n  head()\n\n# A tibble: 6 × 14\n  name         height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n  <chr>         <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n1 Luke Skywal…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n2 C-3PO           167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n3 R2-D2            96    32 <NA>    white,… red        33   none  mascu… Naboo  \n4 Darth Vader     202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n5 Leia Organa     150    49 brown   light   brown      19   fema… femin… Aldera…\n6 Owen Lars       178   120 brown,… light   blue       52   male  mascu… Tatooi…\n# … with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¹​hair_color, ²​skin_color,\n#   ³​eye_color, ⁴​birth_year, ⁵​homeworld"
  },
  {
    "objectID": "3_tidy_linear_regression/doc.html#mlflow",
    "href": "3_tidy_linear_regression/doc.html#mlflow",
    "title": "MLFlow Linear Regression",
    "section": "MLFlow",
    "text": "MLFlow\n\nRegistering Models\nWe will first create a new model in the model registry.\n\nclient = mlflow_client()\ntryCatch(\n  expr = {mlflow_delete_registered_model(\"sw_lm\", client = client)},\n  error = function(x) {}\n)\nmlflow_create_registered_model(\"sw_lm\", client = client, description = \"Perform predictions using Star Wars characters.\")\n\n$name\n[1] \"sw_lm\"\n\n$creation_timestamp\n[1] 1.66826e+12\n\n$last_updated_timestamp\n[1] 1.66826e+12\n\n$description\n[1] \"Perform predictions using Star Wars characters.\"\n\n\nWe will next execute an MLFlow run.\n\n\nMLFlow Run\n\ns3_bucket = \"s3://mlflow/sw_lm\"\n# Begin the run.\nexperiment = mlflow_set_experiment(experiment_name = \"sw_lm\", artifact_location = s3_bucket) \nrun = mlflow_start_run(client = client)\n\n# Save the model.\nsw_lm = lm(height ~ mass, data = data)\npackaged_sw_lm = carrier::crate(\n    function(x) stats::predict.lm(sw_lm),\n    sw_lm = sw_lm\n)\n\n# Log params and metrics.\nmlflow_log_param(\"Intercept\", sw_lm$coefficients[\"(Intercept)\"], client = client, run_id = run$run_uuid)\nmlflow_log_param(\"mass\", sw_lm$coefficients[\"mass\"], client = client, run_id = run$run_uuid)\nmlflow_log_metric(\"MSE\", mean(sw_lm$residuals^2), client = client, run_id = run$run_uuid)\n\n# Log predictions and actual values\nsw_lm |>\n  predict() |>\n  iwalk(\n    ~ mlflow_log_metric(\"prediction\", .x, step = as.numeric(.y), client = client, run_id = run$run_uuid)\n    )\n\ndata$height |> \n  iwalk(\n    ~ mlflow_log_metric(\"actual\",  .x, step = .y, client = client, run_id = run$run_uuid)\n    )\n\n# Save model to the registry.\ncrated_model = \"/tmp/sw_lm\"\nsaved_model = mlflow_save_model(packaged_sw_lm, crated_model)  \nlogged_model = mlflow_log_artifact(crated_model, client = client, run_id =  run$run_uuid) \n\n2022/11/14 21:29:44 INFO mlflow.store.artifact.cli: Logged artifact from local dir /tmp/sw_lm to artifact_path=None\n\nversioned_model = mlflow_create_model_version(\"sw_lm\", run$artifact_uri, run_id = run$run_uuid, client = client)\n\n# Generate report.\nsw_report = data |>\n  select_if(~ !is.list(.x)) |>\n  create_report(output_file = \"star_wars.html\", output_dir = \"/tmp\", report_title = \"Star Wars Report\", quiet = T)\nlogged_report = mlflow_log_artifact(\"/tmp/star_wars.html\", client = client, run_id =  run$run_uuid) \n\n2022/11/14 21:29:55 INFO mlflow.store.artifact.cli: Logged artifact from local file /tmp/star_wars.html to artifact_path=None\n\n# Save plots.\nsw_plot = \"/tmp/star_wars_characters.png\"\npng(filename = sw_plot)\nplot(data$height, data$mass)\ndoff = dev.off()\nlogged_plot = mlflow_log_artifact(sw_plot, client = client, run_id =  run$run_uuid) \n\n2022/11/14 21:29:56 INFO mlflow.store.artifact.cli: Logged artifact from local file /tmp/star_wars_characters.png to artifact_path=None\n\n# Save tibble.\ndata_csv = \"/tmp/star_wars_characters.csv\"\nwrite_csv(data, data_csv)\nlogged_csv = mlflow_log_artifact(data_csv, client = client, run_id =  run$run_uuid) \n\n2022/11/14 21:29:57 INFO mlflow.store.artifact.cli: Logged artifact from local file /tmp/star_wars_characters.csv to artifact_path=None\n\n# End run.\nrun_end = mlflow_end_run(run_id =  run$run_uuid, client = client)\n\n\n\nLoading and Serving Models\nNext, we will load the model from the registry.\n\n# Remove the model from the R environment.\nprint(packaged_sw_lm)\n\n<crate> 40.78 kB\n* function: 27.54 kB\n* `sw_lm`: 13.19 kB\nfunction(x) stats::predict.lm(sw_lm)\n\nrm(packaged_sw_lm)\n\n# Load the model from the registry.\npackaged_sw_lm = mlflow_load_model(\"models:/sw_lm/1\")\nprint(packaged_sw_lm)\n\n<crate> 44.77 kB\n* function: 27.54 kB\n* `sw_lm`: 17.18 kB\nfunction(x) stats::predict.lm(sw_lm)\n\n\nFinally, we will demonstrate how to deploy the model using a model-as-a-service approach.\n\n\nexport MLFLOW_TRACKING_URI=http://mlflow:5000\n\n# ping http://0.0.0.0:9000/predict \nmlflow models serve -m \"models:/sw_lm/1\" -h 0.0.0.0 -p 9000 \n\nYou can also run the following command to deploy the model in a Docker container: docker compose -f docker-compose-serve-model.yaml up"
  },
  {
    "objectID": "3_tidy_linear_regression/doc.html#session-information",
    "href": "3_tidy_linear_regression/doc.html#session-information",
    "title": "MLFlow Linear Regression",
    "section": "Session Information",
    "text": "Session Information\n\n\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] rmarkdown_2.17     data.table_1.14.4  forcats_0.5.2      stringr_1.4.1     \n [5] dplyr_1.0.10       purrr_0.3.5        readr_2.1.3        tidyr_1.2.1       \n [9] tibble_3.1.8       ggplot2_3.3.6      tidyverse_1.3.2    mlflow_1.30.0     \n[13] reticulate_1.26    knitr_1.40         DataExplorer_0.8.2 carrier_0.1.0     \n\nloaded via a namespace (and not attached):\n [1] fs_1.5.2            bit64_4.0.5         lubridate_1.8.0    \n [4] httr_1.4.4          rprojroot_2.0.3     bslib_0.4.0        \n [7] tools_4.2.1         backports_1.4.1     utf8_1.2.2         \n[10] R6_2.5.1            DBI_1.1.3           colorspace_2.0-3   \n[13] withr_2.5.0         tidyselect_1.2.0    gridExtra_2.3      \n[16] processx_3.8.0      bit_4.0.4           curl_4.3.3         \n[19] compiler_4.2.1      cli_3.4.1           rvest_1.0.3        \n[22] swagger_3.33.1      forge_0.2.0         xml2_1.3.3         \n[25] labeling_0.4.2      sass_0.4.2          scales_1.2.1       \n[28] askpass_1.1         rappdirs_0.3.3      digest_0.6.30      \n[31] ini_0.3.1           base64enc_0.1-3     pkgconfig_2.0.3    \n[34] htmltools_0.5.3     highr_0.9           dbplyr_2.2.1       \n[37] fastmap_1.1.0       htmlwidgets_1.5.4   rlang_1.0.6        \n[40] readxl_1.4.1        rstudioapi_0.14     farver_2.1.1       \n[43] jquerylib_0.1.4     generics_0.1.3      jsonlite_1.8.3     \n[46] vroom_1.6.0         googlesheets4_1.0.1 magrittr_2.0.3     \n[49] Matrix_1.4-1        Rcpp_1.0.9          munsell_0.5.0      \n[52] fansi_1.0.3         lifecycle_1.0.3     stringi_1.7.8      \n[55] yaml_2.3.6          plyr_1.8.7          grid_4.2.1         \n[58] parallel_4.2.1      promises_1.2.0.1    crayon_1.5.2       \n[61] lattice_0.20-45     haven_2.5.1         hms_1.1.2          \n[64] zeallot_0.1.0       ps_1.7.2            pillar_1.8.1       \n[67] igraph_1.3.5        codetools_0.2-18    reshape2_1.4.4     \n[70] reprex_2.0.2        glue_1.6.2          evaluate_0.17      \n[73] modelr_0.1.9        png_0.1-7           vctrs_0.5.0        \n[76] tzdb_0.3.0          httpuv_1.6.6        networkD3_0.4      \n[79] cellranger_1.1.0    gtable_0.3.1        openssl_2.0.4      \n[82] assertthat_0.2.1    cachem_1.0.6        xfun_0.34          \n[85] broom_1.0.1         later_1.3.0         googledrive_2.0.0  \n[88] gargle_1.2.1        ellipsis_0.3.2      here_1.0.1"
  },
  {
    "objectID": "2_linear_regression_mlflow/doc.html#grafana",
    "href": "2_linear_regression_mlflow/doc.html#grafana",
    "title": "MLFlow Linear Regression",
    "section": "Grafana",
    "text": "Grafana\nNext, access the Grafana home page. This application will allow you to build your own dashboards.\nGo to Configuration -> Data sources -> Add data source.\n\n\n\nGrafana Configuration Page\n\n\nSelect PostgreSQL as the data source. Enter the following values into the web form.\n\nHost: postgres:5432\nDatabase: docker_r_mlops\nUser: user (Default)\nPassword: pass (Default)\nTLS/SSL Mode: Disable\n\n\n\n\nGrafana Data Source Web Form\n\n\nClick Save & test.\nNext, go to Create -> Dashboard -> Add a new panel. Create the following query.\n\nDatabase: metrics\nTime column: step\nSelect: Column:value\nWhere: Remove the Macro: $__unixEpochFilter\n\nClick Zoom to data. Your dashboard should look like the below. Click Apply to save the dashboard.\n\n\n\nGrafana Dashboard\n\n\nView the dashboard again. Click Table view.\n\n\n\nTable View\n\n\nCongratulations. Feel free to add new panels and experiment with the various plot types supported by Grafana."
  },
  {
    "objectID": "3_tidy_linear_regression/doc.html#minio",
    "href": "3_tidy_linear_regression/doc.html#minio",
    "title": "MLFlow Linear Regression",
    "section": "Minio",
    "text": "Minio\nMinio is an object datavase th\nWe need to create a minio bucket. All of our files will be saved into this bucket.\n\n\nfrom minio import Minio\nimport json\nimport os\n\nminioClient = Minio(\n  os.environ['MLFLOW_S3_ENDPOINT_URL'].split('//')[1],\n  access_key=os.environ['AWS_ACCESS_KEY_ID'],\n  secret_key=os.environ['AWS_SECRET_ACCESS_KEY'],\n  secure = False\n)\n\nmlflow_names = [ bucket.name for bucket in minioClient.list_buckets() ]\nif 'mlflow' not in mlflow_names:\n  minioClient.make_bucket('mlflow')\n\nNext, we set the bucket policy.\n\n\npolicy = {\n  \"Version\":\"2012-10-17\",\n  \"Statement\":[\n    {\n      \"Sid\":\"\",\n      \"Effect\":\"Allow\",\n      \"Principal\":{\"AWS\":\"*\"},\n      \"Action\":\"s3:GetBucketLocation\",\n      \"Resource\":\"arn:aws:s3:::mlflow\"\n    },\n    {\n      \"Sid\":\"\",\n      \"Effect\":\"Allow\",\n      \"Principal\":{\"AWS\":\"*\"},\n      \"Action\":\"s3:ListBucket\",\n      \"Resource\":\"arn:aws:s3:::mlflow\"\n    },\n    {\n      \"Sid\":\"\",\n      \"Effect\":\"Allow\",\n      \"Principal\":{\"AWS\":\"*\"},\n      \"Action\":\"s3:GetObject\",\n      \"Resource\":\"arn:aws:s3:::mlflow/*\"\n    },\n    {\n      \"Sid\":\"\",\n      \"Effect\":\"Allow\",\n      \"Principal\":{\"AWS\":\"*\"},\n      \"Action\":\"s3:PutObject\",\n      \"Resource\":\"arn:aws:s3:::mlflow/*\"\n    }\n  ]}\n\nminioClient.set_bucket_policy('mlflow', json.dumps(policy))"
  }
]